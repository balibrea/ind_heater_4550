-- main_ind.jal
--
-- Copyright 2023 Yosel de Jes√∫s Balibrea Lastre <yosel.balibrea@gmail.com>
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
-- MA 02110-1301, USA.
--
--

--
;@jallib section chipdef
-- chip setup
include 18f4550

pragma target clock       20_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       MINIMUM     -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target CCP2MUX       pin_C1      -- CCP2 on pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           DISABLED    -- no low-voltage programming
pragma target XINST         DISABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog
;@jallib section ccp
-- no specific ccp settings, section required though to generate samples

enable_digital_io()                 -- make all pins digital I/O

include print
include delay
include debounce


-- IO Config -----------------------------------------------------
pin_P1A_direction = output
pin_P1B_direction = output
pin_P1A = off
pin_P1B = off

alias v_in is pin_B0
alias i_in is pin_B1

alias b_1 is pin_B2
alias b_2 is pin_B3
alias b_3 is pin_B4

pin_B0_direction = input
pin_B1_direction = input

pin_B4_direction = input
pin_B3_direction = input
pin_B2_direction = input

alias led is pin_B7
pin_B7_direction = output
------------------------------------------------------------------

-- Wait to power stabilice ---------------------------------------
delay_100ms(10)
------------------------------------------------------------------

-- Configure ADC ------------------------------------------------
-- We won't use any external VRef, so measures are done
-- according to PIC powering voltage
const byte ADC_NVREF = ADC_NO_EXT_VREF

--~ -- The maximum resistance while measuring ADC is... (unit: ohms)
--~ -- Being accurate helps speeding up ADC acquisition
--~ const word ADC_RSOURCE = 2_000
--~ -- In this example, we'll perform low resolution ADC: results are
--~ -- coded on 8bits

const bit ADC_HIGH_RESOLUTION = true
const byte ADC_NCHANNEL = 1
-- Now include the famous library
include adc

-- And initialize the whole with our parameters
adc_init()

-- Gloval variables ----------------------------------------------
var dword freq = 25_000
var dword debug_freq = 25_000
var byte duty = 50  -- Duty cicle percent
var byte phi = 0
var word shift = 0 -- Time phase shift

var byte index = 0 -- Menu index
var bit power_on = off

-- Count down vars
var byte timer_s = 0
var byte timer_m = 0
var byte timer_h = 0

var byte timer_ss = 30 -- Set points
var byte timer_ms = 1
var byte timer_hs = 0

-- Update clock after 1 sec interrupt
var bit count_flag = Off

var bit update = true    -- Update screen!
var bit timer_en = false -- Enable/Disable count down

const byte THRESHOLD = 50  -- Button press threshold

var word b1_st = debounce_init(THRESHOLD) -- Debounce
var word b2_st = debounce_init(THRESHOLD)
var word b3_st = debounce_init(THRESHOLD)

-- Debug vars
var byte debug_index = 0
var bit debug_flag = OFF

--------------------------------------------------------------------

-- PWM -----------------------------------------------------------
include pwm_hardware
pwm_max_resolution(1)

pwm_set_frequency(25000)
pwm1_set_dutycycle_percent(50)
pwm1_off()

-- Set output PWM stage configurations to work as
-- Half bridge output
procedure set_pwm_config() is
    pragma inline
    CCP1CON_CCP1M = 0xC
    CCP1CON_P1M = 2  -- Half bridge operation
    ECCP1DEL_PDC  = 50 -- Dead time
end procedure


-- Turn on PWM module
procedure turn_on() is
    if debug_flag then
        freq = debug_freq
    end if

    pwm_set_frequency(freq)
    pwm1_set_dutycycle_percent(duty)
    pwm1_on()

    set_pwm_config()

    -- TODO: relay switch

    -- Enable external interrups
    -- At the beginning we only spect zero cross voltage interrupts
    -- When this interrupt is triggered, count starts until zero cross
    -- current interrupt
    INTCON_INT0IE = 1 -- Enable external interrupts INT0, INT1
    INTCON3_INT1IE = 0

    INTCON_INT0IF = 0 -- Clear interrupts flags
    INTCON3_INT1IF = 0

    -- Turn On Timer 1
    T1CON_TMR1ON = 1
end procedure

procedure turn_off() is
    pwm1_off()
    pin_P1A = off -- Make sure all is off
    pin_P1B = off

    -- TODO: relay switch

    -- Disable external interrups
    INTCON_INT0IE = 0
    INTCON3_INT1IE = 0

    -- Turn Off Timer 1
    T1CON_TMR1ON = 0

end procedure

------------------------------------------------------------------

-- Timer0 configuration ------------------------------------------
-- This timer is used in 16 bit operation mode for clock count down

T0CON_T0CS = 0   -- internal clock
T0CON_PSA  = 0   -- assign prescaler to timer0
T0CON_T0PS = 7   -- prescaler 1:256
T0CON_T08BIT = 0 -- 16bit timer

-- When countdow is enabled we generate an interrupt every second
-- precharge_value = 65535 - (desired time (1s)) * inst_clock / prescaller
-- 65353 - 19531.25 = 46004
TMR0 = 46004    -- Precharge value
-- This timer is enabled when count down is activated via LCD Timer menu
------------------------------------------------------------------

-- Timer 1 is used to measure phase shift btween voltage and current
-- wave forms, it is used as a free running counter and reseted after
-- zero coss current interrupt.
T1CON_TMR1CS = 0 -- Use instruction clock (fclk/4)
T1CON_RD16 = 1   -- Use 16bit read/write operations
T1CON_T1CKPS = 0 -- Prescale value 1:1
TMR1 = 0

-- This timer is enabled only when power on

-- External Interrupts -------------------------------------------
-- INT0 --> volttage interrupt
-- INT1 --> current interrupt
INTCON2_INTEDG0 = 0 -- enable falling edge detection in INT0
INTCON2_INTEDG1 = 0 -- enable falling edge detection in INT1

INTCON_INT0IF = 0 -- Clear interrupts flags
INTCON3_INT1IF = 0

INTCON_GIE  = on    -- Enable global interrupt

-- INT0 and INT1 interrups must be enabled when power on
------------------------------------------------------------------

-- LCD Config ----------------------------------------------------
const byte LCD_ROWS    =  4           -- LCD with 2 lines
const byte LCD_CHARS   =  20          -- and 16 characters per line
--
alias     lcd_en       is pin_D7      -- data trigger
alias     lcd_rs       is pin_D6      -- command/data select.
pin_D6_direction       = output
pin_D7_direction       = output
--
alias     lcd_d4       is pin_D0
alias     lcd_d5       is pin_D1
alias     lcd_d6       is pin_D2
alias     lcd_d7       is pin_D3
--
pin_D0_direction       = output
pin_D1_direction       = output
pin_D2_direction       = output
pin_D3_direction       = output

include lcd_hd44780_4
include print
--
lcd_init()                            -- init the lcd controller

var byte line1[LCD_CHARS] = "Mi Cocina de Inducc "
var byte line2[LCD_CHARS]
var byte clock_line[LCD_CHARS] = " Tiempo: 00:00:00   "
var byte i, k
lcd_clear_screen()
print_string(lcd, line1)

delay_100ms(10)
lcd_clear_screen()

------------------------------------------------------------------
-- Implements a count down
------------------------------------------------------------------
procedure timer_count_down() is
    if timer_en == true then
        if ((timer_h == 0) & (timer_m == 0) & (timer_s == 0)) then
            timer_en = off
            power_on = off
            turn_off()
            -- TODO: Beep procedure
        end if

        -- Set clock vars
        if timer_s > 0 then
            timer_s = timer_s - 1
        else
            timer_s = 59
            if timer_m > 0 then
                timer_m = timer_m -1
            else
                timer_m = 59
                if timer_h > 0 then
                    timer_h = timer_h - 1
                end if
            end if
        end if

    end if
end procedure

--------------------------------------------------------------
procedure set_timer() is
    -- Enable timer 0 interrupt
    INTCON_TMR0IE = 1
    INTCON_TMR0IF = 0 -- Clear interrupt flag

    T0CON_TMR0ON = on -- enable timer0

    -- Set points for count down
    timer_h = timer_hs
    timer_m = timer_ms
    timer_s = timer_ss

end procedure

--------------------------------------------------------------
procedure timerMgr is
    if timer_en then

        -- Perform a count down...
        if count_flag then
            timer_count_down()
            count_flag = 0
            update = 1
        end if
    else
        -- Tmr0 OFF
        T0CON_TMR0ON = off

        -- Disable Timer 0 interrupt
        INTCON_TMR0IE = 0

        -- Clear set points
        timer_h = 0
        timer_m = 0
        timer_s = 0

    end if
end procedure


procedure menu_home is
    lcd_clear_screen()
    lcd_cursor_position(0,0)

    if power_on == true then
        line1 = " APAGAR  TIMER  POT "
        print_string(lcd, line1)

        lcd_cursor_position(1,0)
        -- Loock for timer values if enabled
        if (timer_en) then
            print_string(lcd, " Tiempo: ")
            print_byte_dec(lcd, timer_h)
            print_string(lcd, ":")
            print_byte_dec(lcd, timer_m)
            print_string(lcd, ":")
            print_byte_dec(lcd, timer_s)
        else
            print_string(lcd, " Tiempo: off")
        end if
    else
        line1 = " ACTIVAR   POTENCIA "
        line2 = "       TIMER        "

        print_string(lcd, line1)
        lcd_cursor_position(1,0)
        print_string(lcd, line2)
    end if

end procedure

-- Debug Menu warning
procedure debug_msg is
    line1 = "Entrar en modo debug"
    line2 = "       SI      NO   "
    lcd_clear_screen()
    lcd_cursor_position(0,0)
    print_string(lcd, line1)
    lcd_cursor_position(1,0)
    print_string(lcd, line2)
end procedure

procedure menu_debug is

    const byte str0[] = "Freq: "
    const byte str1[] = "Phi: "
    const byte str2[] = "duty: "
    const byte str3[] = "Power status: "
    const byte str4[] = " Salir <-"

    lcd_clear_screen()
    lcd_cursor_position(0,0)

    if (debug_index < 4) then
        -- Print -> promt to select parameter
        var byte n
        for 4 using n loop
            lcd_cursor_position(n,0)
            if (n == debug_index) then
                print_string(lcd, "->")
            else
                print_string(lcd, "  ")
            end if
        end loop

        lcd_cursor_position(0,2)
        print_string(lcd, str0)
        print_dword_dec(lcd, debug_freq)
        print_string(lcd, "Hz")

        lcd_cursor_position(1,2)
        print_string(lcd, str1)
        --~ print_byte_dec(lcd, phi)
        print_byte_dec(lcd, debug_index)

        print_string(lcd, " Psh: ")
        print_dword_dec(lcd, shift)

        lcd_cursor_position(2,2)
        print_string(lcd, str2)
        print_dword_dec(lcd, duty)
        print_string(lcd, "%")

        lcd_cursor_position(3,2)
        print_string(lcd, str3)
        print_byte_dec(lcd, power_on)
    else
        lcd_clear_screen()
        lcd_cursor_position(0,0)
        print_string(lcd, "->")
        print_string(lcd, str4)
    end if


end procedure

-- Set Time Menu
procedure menu_timer is
    line1 = " TIMER              "
    --~ line2 =

    lcd_clear_screen()
    lcd_cursor_position(0,0)
    print_string(lcd, line1)

    lcd_cursor_position(1,0)
    print_byte_dec(lcd, timer_hs)
    lcd = ":"
    print_byte_dec(lcd, timer_ms)
    lcd = ":"
    print_byte_dec(lcd, timer_ss)
    --~ print_string(lcd, line2)

end procedure

procedure menu_msg is
    line1 = "   Activar Timer?   "
    line2 = "       SI      NO   "

    lcd_clear_screen()
    lcd_cursor_position(0,0)
    print_string(lcd, line1)
    lcd_cursor_position(1,0)
    print_string(lcd, line2)

end procedure

-- Set Power Menu
procedure menu_power is
    lcd_clear_screen()
    lcd_cursor_position(0,0)
    print_string(lcd, "Power: ")
    print_byte_dec(lcd, duty)
    print_string(lcd, "%")

end procedure

-- Main Menu FSM
procedure menu_fsm is
    pragma inline

    -- Home Menu
    if index == 0 then
        if update == true then
            menu_home()
            update = off
        end if

        if (debounce(b_2, b2_st) == 2) then -- Switch to Timer Menu
            index = 1
            update = on
        end if

        if (debounce(b_3, b3_st) == 2) then -- Switch to Power Menu setting
            index = 2
            update = on
        end if

        if (debounce(b_1, b1_st) == 2) then -- Turn ON Power
            power_on = !power_on
            update = on
            if power_on == true then
                turn_on()
            else
                turn_off()
            end if

        end if

    -- Timer Menu
    elsif index == 1 then
        if update == true then
            menu_timer()
            update = off
        end if

        if (debounce(b_1, b1_st) == 2) then -- ask to activate timer
            index = 3
            update = on

        elsif (debounce(b_2, b2_st) == 2) then  -- Timer Up
            timer_ss = timer_ss + 1
            if timer_ss > 59 then
                timer_ss = 0
                timer_ms = timer_ms + 1
                if timer_ms > 59 then
                    timer_ms = 0
                    timer_hs = timer_hs + 1
                    if timer_hs > 1 then
                        timer_hs = 1
                    end if
                end if
            elsif timer_ms > 59 then
                timer_ms = 0
                timer_hs = timer_hs + 1
            elsif timer_hs > 1 then
                timer_hs = 0
            end if
            update = on

        elsif (debounce(b_3, b3_st) == 2) then  -- Timer Down
            if (timer_ss > 0) then
                timer_ss = timer_ss - 1
            else
                timer_ss = 59
                if (timer_ms > 0) then
                    timer_ms = timer_ms - 1
                else
                    timer_ms = 59
                    if timer_hs > 0 then
                        timer_hs = timer_hs - 1
                    end if
                end if
            end if
            update = on
        end if

    -- Power Menu
    elsif index == 2 then
        if update == true then
            menu_power()
            update = off
        end if

        if (debounce(b_1, b1_st) == 2) then -- Go back home
            index = 0
            update = on
        elsif (debounce(b_2, b2_st) == 2) then  -- Power Up
            duty = duty + 1
            if (duty > 100) then
                duty = 100
            end if
            if power_on == true then
                turn_on()
            end if
            update = on
        elsif (debounce(b_3, b3_st) == 2) then  -- Power Down
            if (duty > 0) then
                duty = duty - 1
            end if
            if power_on == true then
                turn_on()
            end if
            update = on
        end if

        if (debounce(b_1, b1_st) == 2 & debounce(b_2, b2_st) == 0) then -- Go Debug mode
           index = 4
           update = on
        end if


    -- Timer Msg Menu
    elsif index == 3 then -- Timer msg menu
        if update == true then
            menu_msg()
            update = off
        end if

        if (debounce(b_2, b2_st) == 2) then -- Turn on Timer
            timer_en = true
            index = 0
            update = true

            set_timer()

        end if

        if (debounce(b_3, b3_st) == 2) then -- Turn off Timer
            timer_en = false
            index = 0
            update = true
        end if

    -- Debug Msg Menu
    elsif index == 4 then
        if update == true then
            debug_msg()
            update = off
        end if

        if (debounce(b_3, b3_st) == 2) then -- Go home
            index = 0
            update = true
        end if

        if (debounce(b_2, b2_st) == 2) then -- Go Debug
            index = 5
            update = true
        end if

    -- Debug Menu
    elsif index == 5 then
        if update == true then
            menu_debug()
            update = off
        end if

        debug_flag = ON -- Debug mode, some parameters changes!

        -- Change freq
        if (debug_index == 0) then
            -- Move freq up or down
            if (debounce(b_2, b2_st) == 2) then    -- UP
                update = on
                debug_freq = debug_freq + 100
                if (freq >= 50_000) then
                    freq = 50_000
                end if

                if (power_on) then
                    turn_on()
                end if
            end if

            if (debounce(b_3, b3_st) == 2) then   -- Down
                update = on
                debug_freq = debug_freq - 100
                if (freq <= 10_000) then
                    freq = 10_000
                end if

                if (power_on) then
                    turn_on()
                end if
            end if

        elsif (debug_index == 2) then
            -- Move duty up or down
            if (debounce(b_2, b2_st) == 2) then    -- UP
                update = on
                duty = duty + 1

                if (duty > 100) then
                    duty = 100
                end if

                if (power_on) then
                    turn_on()
                end if
            end if

            if (debounce(b_3, b3_st) == 2) then   -- Down
                update = on
                if (duty > 0) then
                    duty = duty - 1
                end if

                if (power_on) then
                    turn_on()
                end if
            end if

        elsif (debug_index == 3) then
            -- Turn on or Off
            if (debounce(b_2, b2_st) == 2) then
                turn_on()
                power_on = on
                update = on
            end if

            if (debounce(b_3, b3_st) == 2) then
                power_on = off
                turn_off()
                update = on
            end if

        end if

        -- Change arrow position to select parameters
        if (debounce(b_1, b1_st) == 2) then
            debug_index = debug_index + 1
            update = on
            if (debug_index > 4) then
                debug_index = 0
            end if
        end if

        if (debug_index == 4) then

            if (debounce(b_2, b2_st) == 2) then -- Go back home
                index = 0
                debug_index = 0
                debug_flag = OFF
                update = on
            end if

            if (debounce(b_3, b3_st) == 2) then -- Go back home
                index = 0
                debug_index = 0
                debug_flag = OFF
                update = on
            end if
        end if

    end if

end procedure

-- Main loop
forever loop
    menu_fsm()

    timerMgr()

end loop


procedure ISR is
    pragma interrupt

    -- Timer 1 (countdown) interrupt
    if INTCON_TMR0IF == true then
        -- Perform count down
        count_flag = true
        TMR0 = 46004
        INTCON_TMR0IF = off   -- Clear interrupt flag
    end if
   
    -- External interrupts --------------------------

    -- INT0 interrupt Voltage zero cross
    if INTCON_INT0IF == true then
        -- Enable Timer 1
        T1CON_TMR1ON = 1
        TMR1 = 0 -- reset timer

        -- Disable INT0 interrupt
        INTCON_INT0IE = 0
        -- Enable INT1 interrupt
        INTCON3_INT1IE = 1

        INTCON_INT0IF = 0  -- clear flag
    end if

    -- INT1 interrupt current zero cross
    if INTCON3_INT1IF == true then
        -- Take phase shift
        shift = TMR1

        -- Disable INT1 interrupt
        INTCON3_INT1IE = 0

        -- Enable INT0 interrupt
        INTCON_INT0IE = 1

        INTCON3_INT1IF = 0  -- clear flag

    end if

end procedure
